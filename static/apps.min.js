// Init App
var myApp = new Framework7({
	modalTitle: 'Dogefaucet',
	material: true
});
var mainView = myApp.addView('.view-main', {}),
	debug = false,
	countDownStop = false,
	deviceModel = (debug) ? "test" : null,
	deviceId = (debug) ? "test" : null,
	appVersion = 2,
	historyRender = false,
	admobid = {},
	trackId = "UA-110981255-1",
	timeoutAjax = 0,
	userMail = "notfounds",
	appealUrl = "https://goo.gl/forms/mXclvja8BRQWSZHX2",
	$$ = Dom7;

var appLang = "us";
var Profiles = {};

//dom element
var earningValueDollar 		= $$('.earningValueDollar'),
	helpRefComission 		= $$('#helpRefComission'),
	earningRefValue 		= $$('.earningRefValue'),
	addressDogecoin 		= $$('.addressDogecoin'),
	referralCounter 		= $$('#referralCounter'),
	doWithdrawalButton 		= $$('#doWithdrawal'),
	refreshButton 			= $$('.refresh-data'),
	earningValue 			= $$('.earningValue'),
	tableEarning 			= $$('#tableEarning'),
	withdrawalView 			= $$('#withdrawal'),
	menuBottom				= $$('#menuBottom'),
	boxToggle				= $$('#box-toggle'),
	doClaimBonus 			= $$('#doClaimBonus'),
	referralCode 			= $$('.referralCode'),
	helpRefCode 			= $$('#helpRefCode'),
	buttonCopy 				= $$('#buttonCopy'),
	buttonClaim 			= $$('#doClaim'),
	historyView 			= $$('#history'),
	faucetView 				= $$('#faucet'),
	wdMin					= $$('#wdMin'),
	wdFee 					= $$('#wdFee');

//baseurl api server
var baseUrl = (debug) ? "http://127.0.0.1:8082/api/v2/" : "https://svr1.serahaja.com:8084/api/v2/";

/**
 * Logging
 * added Module to Log debugging Apps
 * 
 * @param {Object} options 
 */
var Logging = function(options) {

	this.options = options;
}
Logging.prototype.log = function(message) {
	if (debug) {
		if (this.options.type == "alert") {
			alert(message);
		} else {
			console.log(message);
		}
	}
}

var App = new Logging({
	type: 'alert'
});
var Template = function(text) {
	var noMatch = /(.)^/;
	var settings = {
		interpolate : /\{\{(.+?)\}\}/g
	};
	var escaper = /\\|'|\r|\n|\u2028|\u2029/g;
	var escapes = {
		"'":      "'",
		'\\':     '\\',
		'\r':     'r',
		'\n':     'n',
		'\u2028': 'u2028',
		'\u2029': 'u2029'
	};
	var escapeChar = function(match) {
		return '\\' + escapes[match];
	};

	// Combine delimiters into one regular expression via alternation.
	var matcher = RegExp([
		(settings.escape || noMatch).source,
		(settings.interpolate || noMatch).source,
		(settings.evaluate || noMatch).source
	].join('|') + '|$', 'g');

	// Compile the template source, escaping string literals appropriately.
	var index = 0;
	var source = "__p+='";
	text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
		source += text.slice(index, offset).replace(escaper, escapeChar);
		index = offset + match.length;

		if (escape) {
			source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
		} else if (interpolate) {
			source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
		} else if (evaluate) {
			source += "';\n" + evaluate + "\n__p+='";
		}

		// Adobe VMs need the match returned to produce the correct offest.
		return match;
	});
	source += "';\n";

	// If a variable is not specified, place data values in local scope.
	if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

	source = "var __t,__p='',__j=Array.prototype.join," +
		"print=function(){__p+=__j.call(arguments,'');};\n" +
		source + 'return __p;\n';

	try {
		var render = new Function(settings.variable || 'obj', '_', source);
	} catch (e) {
		e.source = source;
		throw e;
	}

	var template = function(data) {
		return render.call(this, data);
	};

	// Provide the compiled source as a convenience for precompilation.
	var argument = settings.variable || 'obj';
	template.source = 'function(' + argument + '){\n' + source + '}';

	return template;
};
var Util = {
	countdown: function(minutes, seconds) {
		var mins = minutes;

		function tick() {
			var counter = $$('#doClaim');
			var current_minutes = mins-1
			seconds--;
			
			counter.text(current_minutes.toString() + ":" + (seconds < 10 ? "0" : "") + String(seconds));
			if (seconds > 0) {
				var timeoutId = setTimeout(tick, 1000);
				nyanStorage.put('timeoutId', timeoutId);
			} else {
				if(mins > 1){
					Util.countdown(mins-1, 60);           
				}
			}
			if (seconds == 0 && mins == 1) {
				countDownStop = true;
				Util.readyToClaim();
			} 
		}
		tick();
	},
	setProfile: function(profile) {
		$$('#addressInput').val(profile.address);

		earningValue.text((profile.amount * 1).toFixed(4) + " Ð");
		referralCode.text(profile.referral);
		earningRefValue.text(profile.amountRef + " Ð");
		referralCounter.text(nyanStorage.get('referrals'));
		addressDogecoin.text(profile.address.substr(0, 16) + '...');

		Util.renderPrice();
	},
	getTimeDiff: function(date) {
		var today = new Date();
		var newDate = new Date(date);

		return Math.floor((today.getTime() - newDate.getTime()) / 1000);
	},
	showNotif: function(message, timeout) {
		var notifAdded = myApp.addNotification({
			message: message
		});

		setTimeout(function() {
			myApp.closeNotification(notifAdded);
		}, timeout);

		return false;
	},
	readyToClaim: function() {
		buttonClaim.removeClass("disabled");
		buttonClaim.text("Claim");

		nyanStorage.put('claim', true);
		nyanStorage.remove('startClaim');

		Util.showNotif('Now, Faucet ready to claim!', 5000);
	},
	ajaxErrorCallback: function(data) {
		var statusCode = data.status;	

		if (statusCode !== 200 || data.statusText !== "OK") {	
			switch(statusCode) {
				case 401:
					mainView.router.loadPage('login.html');

					Util.showNotif("Sorry, please login again!", 6000);
					break;
				default:
					if (data.statusText) {
						Util.showNotif(data.statusText, 3000);
					} else {
						try {
							window.ga.trackException('onAjaxError', true);
						} catch(e) {
							App.log('trackException is not founds');
						}

						Util.showNotif("Sorry, we are can't connect to Server. Pelase try again later", 3000);
					}
					break;
			}
		}

		myApp.hidePreloader();
		myApp.hideIndicator();
		myApp.pullToRefreshDone();
	},
	seeTime: function() {
		if (!nyanStorage.isAvailable('startClaim')) {
			buttonClaim.removeClass('disabled');
			buttonClaim.text('Claim');
		} else {
			buttonClaim.addClass('disabled');

			var startClaim = nyanStorage.get('startClaim');
			var diffClaim = (4 * 60) - Util.getTimeDiff(startClaim);

			if (diffClaim < 0) {
				buttonClaim.removeClass('disabled');
				buttonClaim.text('Claim');
			} else {
				var minutes = Math.floor(diffClaim / 60);
				var seconds = diffClaim - minutes * 60;

				Util.countdown((minutes + 1), seconds);
			}
		}
	},
	renderPrice: function(price) {
		var amountDollar;

		if (typeof price === "undefined") {
			amountDollar = Profiles.amount * nyanStorage.get('dollar');
		} else {
			amountDollar = Profiles.amount * price;
		}
		
		earningValueDollar.text("$ " + amountDollar.toFixed(7)); 
	},
	trackEvent: function(eventName) {
		try {
			window.ga.trackEvent('Apps', eventName, 'Hits', 1);
		} catch(e) {
			App.log('event tract error ' + eventName);
		}
	},
	bannedCallback() {
		myApp.confirm("Sorry, your account has banned automatically by Systems. Please fill this form to Appeal. Select 'OK' to copy form url.", function() {
			window.cordova.plugins.clipboard.copy(appealUrl, function() {
				myApp.alert("Url already copy to clipboard");
			}, function() {
				myApp.alert("Ow no, we can't copy the url into clipboard. Write this manualy, '" + appealUrl + "'");
			});
		});
	}
}
var Events = {
	onDeviceReady: function() {
		//check is deviceId variable null, then set to device.uuid
		try	{
			deviceId = device.uuid;
			deviceModel = device.model;
		} catch(e) {
			App.log("onDeviceReady - Error: Device ID not found");
		}

		document.addEventListener("pause", Events.onAppPause, false);
		document.addEventListener("resume", Events.onAppResume, false);

		if( /(android)/i.test(navigator.userAgent) ) { // for android & amazon-fireos
			admobid = {
				banner: 'ca-app-pub-3848435382278815/4590007628',
				interstitial: 'ca-app-pub-3848435382278815/4934402806'
			};
		}

		// this will create a banner on startup
		if (typeof AdMob !== "undefined") {
			AdMob.createBanner( {
				adId: admobid.banner,
				position: AdMob.AD_POSITION.BOTTOM_CENTER,
				isTesting: false,
				overlap: false,
				offsetTopBar: false,
				bgColor: 'black'
			});
			AdMob.prepareInterstitial({
				adId: admobid.interstitial,
				autoShow:false
			});

			App.log("onDeviceReady - Admob created");
		}

		Events.onAppReady();

	    referralCode.click(function(e) {
	    	var profile = nyanStorage.get('userProfile');

	    	window.cordova.plugins.clipboard.copy(profile.referral, function() {
	    		Util.showNotif("Referral Code has been copy to clipboard", 3000);
	    	}, function() {
	    		Util.showNotif("Error while copy to clipboard", 3000);
	    	});
	    });

	    window.ga.startTrackerWithId(trackId, 30, function() {
			App.log('Google analytics is ready now');
			//the component is ready and you can call any method here
			window.ga.setUserId(device.uuid);
			window.ga.setAllowIDFACollection(true);
			window.ga.trackView('Apps');
        }, function(e) {
        	App.log('onDeviceReady - Error starting GoogleAnalytics');
        });

	    App.log("onDeviceReady event finish");
	},
	onLoad: function() {
		var userProfile = nyanStorage.get('userProfile');

		if (userProfile) {
			Util.setProfile(userProfile);
		} else {
			mainView.router.loadPage('login.html');
		}
		
		Util.seeTime();

		document.addEventListener("deviceready", Events.onDeviceReady);

		if (!window.cordova) {
			Events.onAppReady();
		}

		$$('#overlay-preloader').find("button").click(function() {
			$$('#overlay-preloader').find("h4").text("Loading...");
			$$('#overlay-preloader').find("button").hide();

			Events.onAppReady();
		});

		App.log("onLoad event finish");
	},
	onAjaxDetected: function(e) {
		if (e.detail.xhr.requestUrl.indexOf('autocomplete-languages.json') >= 0) {
			return;
		}
		myApp.hideIndicator();
	},
	onAppReady: function() {
		App.log("onAppsReady Event start");

		Util.trackEvent('onPingRequest');

		$$.ajax({
			url: baseUrl + 'ping',
			method: 'GET',
			timeout: timeoutAjax,
			headers: {
				'x-app-version': appVersion,
				'x-device-id': deviceId
			},
			dataType: 'json',
			success: function(data) {
				App.log("onAppsReady Event - Ajax Complete");

				setTimeout(function() {
					if (data.status) {
						$$('#overlay-preloader').hide();

						wdFee.text(data.data.feeWithdrawal);
						wdMin.text(data.data.minWithdrawal);

						nyanStorage.put('minWd', data.data.minWithdrawal);
						nyanStorage.put('feeWd', data.data.feeWithdrawal);
						nyanStorage.put('dollar', data.data.price);
						
						if (nyanStorage.get('userProfile')) {
							var newsId		 = nyanStorage.get('newsHash');
							var profiles 	 = nyanStorage.get('userProfile');
								Profiles 	 = profiles;

							Util.renderPrice(data.data.price);
						}

						if (data.newsId !== newsId) {
							App.log("onAppReady Event - news md5 different");
							   
							$$('i.icon-bars').html('<span class="badge bg-red">$</span>');
						} else {
							App.log("onAppReady Event - news md5 same as before");
							
							$$('i.icon-bars').find('span').remove();
						}
					} else {
						App.log("onAppReady Event - Error: " + data.toString());

						$$('#overlay-preloader').find('i.icon-seat').hide();
						$$('#overlay-preloader .sad').show();
						$$('#overlay-preloader').find("h4").text(data.message);
						$$('#overlay-preloader').find("button").show();
					}
				}, 1000);
			},
			error: function(data) {
				App.log("onAppReady Event - Error: " + data.toString());

				$$('#overlay-preloader').find('i.icon-seat').hide();
				$$('#overlay-preloader .sad').show();
				$$('#overlay-preloader').find("h4").text("Sorry, we are can't connect to Server. Please try again later");
				$$('#overlay-preloader').find("button").show();
			}
		});
	},
	onAppPause: function() {

		countDownStop = true;
	},
	onAppResume: function() {
		clearTimeout(nyanStorage.get('timeoutId'));
		Util.seeTime();
	},
	panel: {
		onOpen: function() {
			$$('.statusbar-overlay').addClass('with-panel-left');
		},
		onClose: function() {
			$$('.statusbar-overlay').removeClass('with-panel-left');
		}
	},
	button: {
		onClickBoxToggle: function() {
			boxToggle.toggleClass('active');
			menuBottom.toggleClass('active');
		},
		onClickClaim: function() {
			Util.trackEvent('onClaim');
			
			if ($$('#addressInput').val() !== "" && nyanStorage.get('claimTime') == null) {
				if (Profiles.status == "active") {
					$$.ajax({
						url: baseUrl + "claim",
						method: 'POST',
						dataType: 'json',
						timeout: timeoutAjax,
						headers: {
							Token: nyanStorage.get('apiKey'),
							Key: nyanStorage.get('key'),
							'x-app-version': appVersion,
							'x-device-id': deviceId
						},
						success: function (data, status, xhr) {
							if (data.status) {
								nyanStorage.put('key', xhr.getResponseHeader('Access-Control-Key'));
								nyanStorage.put('startClaim', Date.now());
								nyanStorage.put('claim', false);

								Util.countdown(4, 60);
								buttonClaim.addClass('disabled');

								earningValue.text((data.results.total * 1).toFixed(4) + " Ð");
								earningRefValue.text(data.results.refEarn + " Ð");
								Util.showNotif("+" + data.results.earn + " Ð", 3000);

								var profiles = nyanStorage.get('userProfile');
								profiles.amount = data.results.total;

								/**	
								 * Show Adds Pop up
								 */
								AdMob.showInterstitial();

								Profiles = profiles;
								nyanStorage.put('userProfile', profiles);

								Util.renderPrice();
								Util.trackEvent('onValidClaim');
							} else {
								try {
									window.ga.trackException('onClaimError', false);
								} catch(e) {
									App.log('onClaimError trackException error');
								}
								try	{
									if (data.message) {
										Util.showNotif("ERROR: " + data.message, 3000);

										if (data.message.indexOf('already claim')) {
											nyanStorage.put('key', xhr.getResponseHeader('Access-Control-Key'));
										}
									}
								} catch(e) {
									console.log(data.message);
								}
							}
						},
						error: Util.ajaxErrorCallback
					});	
				} else {
					Util.bannedCallback();
				}
			}

			App.log("onClickClaim event finish");
		},
		onClickWithdrawal: function() {
			Util.trackEvent('onRequestWithdrawal');

			if (Profiles.status == "action") {

				var amountToWd = ($$('#amountWd').val() * 1);
				var profile = nyanStorage.get('userProfile');
				var minWdVal = nyanStorage.get('minWd') * 1;
				var feeWdVal = nyanStorage.get('feeWd') * 1;

				// do confirm
				if (amountToWd != 0) {
					var fromTimeout = false;
					var notifAdded = myApp.addNotification({
						message: "Confirm this action, auto cancel in 5s",
						button: {
							text: 'YES'
						},
						onClose: function() {
							if (!fromTimeout) {
								if (amountToWd > (profile.amount + feeWdVal)) {
									Util.showNotif("Amount withdrawal is larger than your earning amount!", 5000);
								} else if (amountToWd < minWdVal) {
									Util.showNotif("Amount withdrawal is smaller than Minimum Withdrawal!", 5000);
								} else {
									// do ajax
									$$.ajax({
										url: baseUrl + 'withdrawal/request',
										method: "POST",
										dataType: "json",
										timeout: timeoutAjax,
										headers: {
											Token: nyanStorage.get('apiKey'),
											Key: nyanStorage.get('key'),
											'x-app-version': appVersion,
											'x-device-id': deviceId
										},
										data: {
											amount: amountToWd
										},
										success: function(res, status, xhr) {
											if (res.status) {
												nyanStorage.put('key', xhr.getResponseHeader('Access-Control-Key'));
												Util.showNotif("Withdrawal request has been added", 3000);
											} else {
												try	{
													nyanStorage.put('key', xhr.getResponseHeader('Access-Control-Key'));
													if (res.message) {
														myApp.alert("ERROR: " + res.message);
													}
												} catch(e) {
													console.log(res.message);
												}
											}
										},
										error: Util.ajaxErrorCallback
									});
								}
							}
						}
					});

					setTimeout(function() {
						fromTimeout = true;
						myApp.closeNotification(notifAdded);
					}, 5000);
				} else {
					Util.showNotif("Please fill amount of Doge you want to Withdrawal", 5000);
				}
			} else {

				Util.bannedCallback();
			}
		}
	},
	page: {
		onInitLogin: function(page) {
			Util.trackEvent('onLogin');

			nyanStorage.clear();

			$$(page.container).find('#enterButton').click(function () {
				
				var address = $$(page.container).find('input[name="address"]').val();
				var referral = $$(page.container).find('input[name="referral"]').val();

				if (address !== "") {
					$$.ajax({
						url: baseUrl + "auth/",
						method: 'POST',
						dataType: 'json',
						timeout: timeoutAjax,
						headers: {
							'x-app-version': appVersion,
							'x-device-id': deviceId
						},
						data: {
							address: address,
							referral: referral,
							deviceModel: deviceModel
						},
						success: function (data, code, xhr) {
							myApp.hidePreloader();

							// Save
							if (data.status) {
								var etag = data.etag.split('.')[1].split('/')[0];

								nyanStorage.put('userProfile', data.results.user);
								nyanStorage.put('apiKey', data.results.apiKey);
								nyanStorage.put('key', etag);
								nyanStorage.put('data', data.data);
								nyanStorage.put('dollar', data.results.price);
								
								nyanStorage.put('minWd', data.withdrawal.min);
								nyanStorage.put('feeWd', data.withdrawal.fee);

								Profiles = data.results.user;

								Util.setProfile(data.results.user);

								mainView.router.back();
							} else {
								
								myApp.alert(data.message);
							}
						},
						error: Util.ajaxErrorCallback
					});
				} else {
					myApp.alert("Please fill Dogecoin address field");
				}
			});
		},
		onInitNews: function (page) {
			Util.trackEvent('onNewsInitialize');

			$$(page.container).find('#backButton').click(function () {
				mainView.router.back();
			});
			function render(news) {
				var newsWrapper = document.getElementById('newsWrapper'),
					elementString = "";

				newsWrapper.innerHTML = "";
				news.forEach(function(post) {
					elementString = "<div class='card'>\
										<div class='card-content'>\
											<div class='card-content-inner'>\
												<p class='color-gray'>Posted {{ publish }}</p>\
												<h3>{{ title }}</h3>\
												<p>{{ content }}</p>\
											</div>\
										</div>\
									</div>";

					elementTemplate = Template(elementString);
					elementRendered = elementTemplate(post); 	

					newsWrapper.innerHTML += elementRendered;			
					elementString = "";
				});
			}
			if (nyanStorage.isAvailable('news')) {
				render(nyanStorage.get('news'));
			} else {
				$$.ajax({
					url: baseUrl + 'news/latest',
					method: "GET",
					dataType: "json",
					timeout: timeoutAjax,
					headers: {
						'x-app-version': appVersion,
						'x-device-id': deviceId,
					},
					success: function(data) {
						nyanStorage.put('news', data.results.news);
						nyanStorage.put('newsHash', data.results.newsHash);

						render(data.results.news);
					},
					error: Util.ajaxErrorCallback
				})
			}

			var ptrContent = $$(page.container).find('.pull-to-refresh-content');
			ptrContent.on('refresh', function(e) {
				$$.ajax({
					url: baseUrl + 'news/latest',
					method: "GET",
					dataType: "json",
					timeout: timeoutAjax,
					headers: {
						'x-app-version': appVersion,
						'x-device-id': deviceId
					},
					success: function(data) {
						nyanStorage.put('news', data.results.news);
						nyanStorage.put('newsHash', data.results.newsHash);

						render(data.results.news);
					},
					error: Util.ajaxErrorCallback
				});

				myApp.pullToRefreshDone();
			});
		},
		onInitDonate: function(page) {
			$$(page.container).find('#backButton').click(function () {
				mainView.router.back();
			});

			Util.trackEvent('onUserVisitDonate');

			$$(page.container).find('#bitcoinAddress').val(atob("MU1GV2diRXpwaWlnTmJqTW11TlBhYk15b0RtcnZUNmY4YQ=="));
			$$(page.container).find('#ethereumAddress').val(atob("MHhhNTA0ZTdhYmU1YTY5ZDYwNTlmODg0MDMzZmUzOGIzNTZhN2ExMjM5"));
			$$(page.container).find('#dogecoinAddress').val(atob("RFNad1dqQ2R2RUpZaHJuZDJzNzlVWVZYUm1raEZYclB2OQ=="));
			$$(page.container).find('#digibyteAddress').val(atob("REpMVVcyOVE0d0d3MXpMbXN3c2pHNGttamFLWFdzVlg1dg=="));
			$$(page.container).find('#litecoinAddress').val(atob("TFpqUGJWRG5hS2huN1BMMnpod3NuZGtWalRHRlNyZ3VNMw=="));
		}
	},
	tab: {
		faucet: {
			onShow: function() {
				refreshButton.hide();
			},
			onRefresh: function() {
				var profiles = nyanStorage.get('userProfile');
				var amountDollar;

				if (profiles == null) {
					nyanStorage.clear();
					mainView.router.loadPage('login.html');
				} else {
					amountDollar = profiles.amount * nyanStorage.get('dollar');
					earningValueDollar.text("$ " + amountDollar.toFixed(7)); 
				}

				$$.ajax({
					url: baseUrl + "auth/active",
					method: "GET",
					dataType: "json",
					timeout: timeoutAjax,
					headers: {
						Token: nyanStorage.get('apiKey'),
						Key: nyanStorage.get('key'),
						'x-app-version': appVersion,
						'x-device-id': deviceId
					},
					success: function(res, status, xhr) {
						Util.trackEvent('onRefreshUser');

						if (res.status) {
							nyanStorage.put('key', xhr.getResponseHeader('Access-Control-Key'));

							nyanStorage.put('userProfile', res.results);
							nyanStorage.put('dollar', res.data.price);

							Profiles = res.results;

							var newsId = nyanStorage.get('newsHash');

							if (res.newsId !==newsId) {
								$$('i.icon-bars').html('<span class="badge bg-red">$</span>');
							} else {
								$$('i.icon-bars').find('span').remove();
							}

							Util.setProfile(res.results);
							clearTimeout(nyanStorage.get('timeoutId'));

							nyanStorage.put('minWd', res.data.minWithdrawal);
							nyanStorage.put('feeWd', res.data.feeWithdrawal);
							nyanStorage.put('referrals', res.referrals);

							wdMin.text(res.data.minWithdrawal);
							wdFee.text(res.data.feeWithdrawal);
							referralCounter.text(res.referrals);

							Util.seeTime();
							Util.showNotif("Time Synchronized", 3000);
						} else {
							Util.showNotif("Error Refresh Status", 3000);
						}
						myApp.pullToRefreshDone();
					},
					error: Util.ajaxErrorCallback
				})
			}
		},
		history: {
			data: {
				claimDOM: "<tr>\
							<td class=\"label-cell content-nowrap\">#{{ id }}</td>\
							<td class=\"label-cell content-nowrap\"><span class='color-green'>{{ amount }} Ð</span></td>\
							<td class=\"label-cell content-nowrap\">{{ onClaim }}</td>\
						 </tr>",
				withdrawalDOM: "<tr>\
									<td class=\"label-cell\">#{{ id }}</td>\
									<td class=\"label-cell\"><span class=\"badge {{ colorLabel }}\">{{ status }}</span></td>\
									<td class=\"label-cell\">\
										<div class=\"content-nowrap\">\
											<b>Address</b> : {{ address }}<br />\
											<b>Amount</b> : {{ amount }} Ð<br />\
											<b>TxId</b> : {{ txIdDisplay }}<br />\
											<b>Date Processed</b> : {{ onProcess }}<br />\
											<b>Date Success</b> : {{ onSuccess }}\
											<b class='{{ showReason }} color-red'><br />Violate the prevailing policies</b>\
										</div>\
									</td>\
								 </tr>"
			},
			onShow: function() {

				// Show Refresh Icon
				refreshButton.show();

				if (!historyRender) {
					myApp.pullToRefreshTrigger(historyView);
					historyRender = true;
				} 

				refreshButton.click(function(e) {
					myApp.pullToRefreshTrigger(historyView);
				});
			},
			onRefresh: function() {
				var dataTable = document.getElementById('tableEarning');
				var withdrawalTable = document.getElementById('withdrawalTable');

				// Reset
				dataTable.innerHTML = "";
				withdrawalTable.innerHTML = "";
				$$.ajax({
					method: "GET",
					url: baseUrl + 'history/',
					dataType: 'json',
					timeout: timeoutAjax,
					headers: {
						Token: nyanStorage.get('apiKey'),
						Key: nyanStorage.get('key'),
						'x-app-version': appVersion,
						'x-device-id': deviceId
					},
					success: function(datas, status, xhr) {
						Util.trackEvent('onRefreshHistory');

						nyanStorage.put('key', xhr.getResponseHeader('Access-Control-Key'));
						nyanStorage.put('historySource', datas.results);
						nyanStorage.put('referrals', datas.results.referrals);

						referralCounter.text(datas.results.referrals);

						datas.results.user.forEach(function(data) {
							elementString = Events.tab.history.data.claimDOM;
							elementTemplate = Template(elementString);
							elementRendered = elementTemplate(data);

							dataTable.innerHTML += elementRendered;
						});
						
						datas.results.withdrawal.forEach(function(data) {
							data.colorLabel = (data.status == "Success") ? "bg-green" : (data.status == "Canceled") ? "bg-red" : "bg-orange";
							data.txIdDisplay = (data.status == "Success") ? "<a>" + data.txId.substr(0, 30) + "...</a>" : "Not Avialable";
							data.showReason = (data.status == "Canceled") ? 'showReason' : 'hideReason';

							elementString = Events.tab.history.data.withdrawalDOM;
							elementTemplate = Template(elementString);
							elementRendered = elementTemplate(data);

							withdrawalTable.innerHTML += elementRendered;
						});

						if (datas.results.withdrawal.length == 0) {
							withdrawalTable.innerHTML = "<div class='content-block-title' style='padding: 0;'>No data</div>";
						}

						myApp.pullToRefreshDone();
					},
					error: Util.ajaxErrorCallback
				});
			}
		},
		withdrawal: {
			onShow: function() {
				refreshButton.hide();

				var timeoutId = true;
				$$('#amountWd').on('keyup', (function() {
					if (timeoutId) {
						window.clearTimeout(timeoutId);

						timeoutId = window.setTimeout(function() {
							var thisVal = $$('#amountWd').val();
							$$('#estimatedReceived').val((thisVal * 1) - nyanStorage.get('feeWd'));
						}, 500);
					}
				}));
				var profile = nyanStorage.get('userProfile');

				var minWd = nyanStorage.get('minWd');
				var progress = ((profile.amount * 1)/minWd) * 100;
				var progressbar = $$('.progressbar-inline .progressbar');
				
				myApp.setProgressbar(progressbar, progress);
				$$('#percentValue').text(progress.toFixed(2) + "%");
				if (progress > 100) {
					$$('#percentValue').addClass('luweh');
				}
			}
		}
	}
}

/**	
 * Ajax Events 
 */
$$(document).on('ajaxStart', Events.onAjaxDetected);
$$(document).on('ajaxComplete', Events.onAjaxDetected);

/**	
 * Panel Events
 */
$$('.panel-left').on('close', Events.panel.onClose);
$$('.panel-left').on('open', Events.panel.onOpen);

/**	
 * Button Events
 */
buttonClaim.on('click', Events.button.onClickClaim);
doWithdrawalButton.on('click', Events.button.onClickWithdrawal);
boxToggle.on('click', Events.button.onClickBoxToggle);

/**	
 * Page Events
 */
myApp.onPageInit('login', Events.page.onInitLogin);
myApp.onPageInit('news', Events.page.onInitNews);
myApp.onPageInit('donateView', Events.page.onInitDonate);

/**	
 * Tabs Events
 */
faucetView.on('tab:show', Events.tab.faucet.onShow);
faucetView.on('ptr:refresh', Events.tab.faucet.onRefresh);
historyView.on('tab:show', Events.tab.history.onShow);
historyView.on('ptr:refresh', Events.tab.history.onRefresh);
withdrawalView.on('tab:show', Events.tab.withdrawal.onShow);

/**
 * Event Want Push to Analytics
 */
document.addEventListener('onAdFailLoad', function(e) {
	/**	Push analytics onAdFailLoad */
	window.ga.trackEvent('Apps', 'onAdFailLoad', 'Fail', 1); 
});
document.addEventListener('onAdPresent', function(e) {
	/** Push analytics onAdPresent */
	window.ga.trackEvent('Apps', 'onAdPresent', 'Hits', 1); 
});

//fire event on app loaded
Events.onLoad();
