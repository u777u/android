function Ajax(options) {
	if (isObject(options)) {
		var ajaxOptions = {
			url: options.url,
			method: options.method,
			timeout: timeoutAjax,
			dataType: "json",
			headers: {
				Nonce: Date.now(),
				Version: appVersion,
				Device: deviceId,
				Model: deviceModel
			}
		}

		ajaxOptions.headers = Object.assign(ajaxOptions.headers, options.headers);

		if (options.data) {
			ajaxOptions.data = options.data;

			ajaxOptions.headers.Signature = "Sign " + CryptoJS.HmacSHA256(
				JSON.stringify(options.data), 
				(options.key) ? options.key : nyanStorage.get('apiKey')
			).toString();
		} 
		if (options.auth) {
			ajaxOptions.headers.Authorization = "Bearer " + nyanStorage.get('apiKey');
		}

		this.ajaxOptions = ajaxOptions;
	}
}
Ajax.prototype.then = function(callback, error) {
	console.log("run");

	this.ajaxOptions.success = callback;
	this.ajaxOptions.error = error;

	$$.ajax(this.ajaxOptions);
}
var myApp = new Framework7({
	modalTitle: 'Dogefaucet',
	material: true
});
var mainView = myApp.addView('.view-main', {}),
	debug = false,
	countDownStop = false,
	deviceId = (debug) ? "DEVICETEST3" : null,
	deviceModel = (debug) ? "DEVICETEST3" : null,
	appVersion = 3,
	historyRender = false,
	admobid = {},
	trackId = "UA-110981255-1",
	timeoutAjax = 5000,
	userMail = "notfounds",
	appealUrl = "https://goo.gl/forms/mXclvja8BRQWSZHX2",
	loginData = {
		address: null
	},
	version = "3.0.1",
	$$ = Dom7;

var notifications = [
	"Be careful with bots, multiple accounts and automation we have a sensitive system.",
	"Pull down page to refresh data.",
	"Send email to us if any error",
	"Bad rate only make this app to be shutdown"
]

var Profiles = {};

//dom element
var selectWithdrawalLevel	= $$('#selectWithdrawalLevel')
	earningValueDollar 		= $$('.earningValueDollar'),
	helpRefComission 		= $$('#helpRefComission'),
	earningRefValue 		= $$('.earningRefValue'),
	addressDogecoin 		= $$('.addressDogecoin'),
	referralCounter 		= $$('#referralCounter'),
	dogecoinValue			= $$('.dogecoinValue'),
	doWithdrawalButton 		= $$('#doWithdrawal'),
	refreshButton 			= $$('.refresh-data'),
	switchButton			= $$('#switchButton'),
	earningValue 			= $$('.earningValue'),
	tableEarning 			= $$('#tableEarning'),
	withdrawalView 			= $$('#withdrawal'),
	menuBottom				= $$('#menuBottom'),
	boxToggle				= $$('#box-toggle'),
	doClaimBonus 			= $$('#doClaimBonus'),
	notifDOM				= $$('#notifMessage')
	referralCode 			= $$('.referralCode'),
	helpRefCode 			= $$('#helpRefCode'),
	buttonCopy 				= $$('#buttonCopy'),
	exchangeView			= $$('#exchange'),
	buttonClaim 			= $$('#doClaim'),
	historyView 			= $$('#history'),
	faucetView 				= $$('#faucet'),
	wdMin					= $$('#wdMin'),
	wdMax					= $$('#wdMax'),
	wdFee 					= $$('#wdFee');

$$('.appVersion').text(version);

var wdLevel = {
	urgent: 3,
	high: 2,
	normal: 1.5
}

//baseurl api server
var baseUrl = (debug) ? "http://127.0.0.1:8084/api/v3/" : "https://api.nyandev-id.org/api/v3/";

/**
 * Logging
 * added Module to Log debugging Apps
 * 
 * @param {Object} options 
 */
var Logging = function(options) {

	this.options = options;
}
Logging.prototype.log = function(message) {
	if (debug) {
		if (this.options.type == "alert") {
			alert(message);
		} else {
			console.log(message);
		}
	} else {
		console.log(message);
	}
}

var App = new Logging({
	type: 'console'
});
var Events = {
	init: function() {
		Util.seeTime();

		document.addEventListener("deviceready", Events.onDeviceReady);

		if (!window.cordova) {
			Events.onAppReady();
		}

		$$('#overlay-preloader').find("button").click(function() {
			$$('#overlay-preloader').find("h4").text("Loading...");
			$$('#overlay-preloader').find("button").hide();

			Events.onAppReady();
		});

		App.log("Init event finish");
	},
	onDeviceReady: function() {
		if (typeof device !== "undefined") {
			deviceId = device.uuid;
			deviceModel = device.model;
			
			if (device.isVirtual) {
				myApp.alert('Sorry, you are using detected using Virtual Device. Please using the real phone');

				return false;
			}

			var hashDevice = device;

			delete hashDevice.version;
			delete hashDevice.cordova;
			delete hashDevice.isVirtual;

			window.uuidDevice = CryptoJS.HmacSHA256(JSON.stringify(hashDevice), deviceId).toString();
		} 

		document.addEventListener("pause", Events.onAppPause, false);
		document.addEventListener("resume", Events.onAppResume, false);

		if( /(android)/i.test(navigator.userAgent) ) { // for android & amazon-fireos
			admobid = {
				banner: 'Y2EtYXBwLXB1Yi0zODQ4NDM1MzgyMjc4ODE1LzQ1OTAwMDc2Mjg=',
				bannerT: 'Y2EtYXBwLXB1Yi0zOTQwMjU2MDk5OTQyNTQ0LzYzMDA5NzgxMTE=',
				interstitial: 'Y2EtYXBwLXB1Yi0zODQ4NDM1MzgyMjc4ODE1LzQ5MzQ0MDI4MDY=',
				interstitialT: 'Y2EtYXBwLXB1Yi0zOTQwMjU2MDk5OTQyNTQ0LzEwMzMxNzM3MTI='
			};
		}

		// this will create a banner on startup
		if (typeof AdMob !== "undefined") {
			AdMob.createBanner( {
				adId: atob(admobid.bannerT),
				position: AdMob.AD_POSITION.BOTTOM_CENTER,
				isTesting: false,
				overlap: false,
				offsetTopBar: false,
				bgColor: 'black'
			});
			AdMob.prepareInterstitial({
				adId: atob(admobid.interstitialT),
				isTesting: true,
				autoShow:false
			});

			App.log("onDeviceReady - Admob created");
		}

	    referralCode.click(function(e) {
	    	window.cordova.plugins.clipboard.copy(Profiles.referral, function() {
	    		Util.showNotif("Referral Code has been copy to clipboard", 3000);
	    	}, function() {
	    		Util.showNotif("Error while copy to clipboard", 3000);
	    	});
	    });

	    window.ga.startTrackerWithId(trackId, 30, function() {
			App.log('Google analytics is ready now');
			//the component is ready and you can call any method here
			window.ga.setUserId(device.uuid);
			window.ga.setAllowIDFACollection(true);
			window.ga.trackView('DogeFaucet 3.0.0');
        }, function(e) {
        	App.log('onDeviceReady - Error starting GoogleAnalytics');
        });

        plugins.DeviceAccounts.getEmail(function(email) {
			if (typeof email == "string") {
				nyanStorage.put('email', email);
			} else {
				myApp.alert("Device must be have Google Accounts", "Warning");
			}
		},
		function (error) {
			function showEmailAlert() {
				myApp.prompt('Sorry, but we cannot get email from your device. Please write down your email', 'Important', function(email) {
					if (isEmail(email)) {
						nyanStorage.put('email', email);

						Util.showNotif('Email setting Successfuly', 4000);
					} else {
						showEmailAlert();
					}
				});
			}

			showEmailAlert();
		});


		Events.onAppReady();

	    App.log("onDeviceReady event finish");
	},
	onAjaxDetected: function(e) {
		if (e.type == "ajaxStart") {
			myApp.showIndicator();
		} else {
			setTimeout(function() {
				myApp.hideIndicator();
			}, 500);
		}
	},
	onAppReady: function() {
		App.log("onAppsReady Event start");
		Util.trackEvent('onPingRequest');

		var adsStatic = {
			fail: nyanStorage.get('adsFail') || 0,
			present: nyanStorage.get('adsPresent') || 0,
			uuid: window.uuidDevice || undefined
		};

		var _ajax = new Ajax({
			url: baseUrl + 'ping/',
			method: 'POST',
			auth: false,
			data: adsStatic,
			key: deviceId
		});

		_ajax.then(function(data) {
			App.log("onAppsReady Event - Ajax Complete");

			var userProfile = nyanStorage.get('userProfile');
			var isLogined = true;

			if (data.success) {
				wdMin.text(data.data.withdrawal.min);
				wdMax.text(data.data.withdrawal.max)

				nyanStorage.put('withdrawalConfig', {
					min: data.data.withdrawal.min * 1,
					max: data.data.withdrawal.max * 1,
					fees: data.data.withdrawal.fees
				})
				nyanStorage.put('dollar', data.data.price);
				nyanStorage.put('fees', data.data.withdrawal.fees);
				nyanStorage.put('account', data.address);
				nyanStorage.put('notifications', data.news.notifications);

				nyanStorage.put('adsFail', 0);
				nyanStorage.put('adsPresent', 0);

				wdLevel = data.data.withdrawal.fees;

				if (userProfile) {
					var newsId		 = nyanStorage.get('newsHash');
						Profiles 	 = userProfile; // global variable

					Util.renderPrice(data.data.price);
				}

				if (data.newsId !== newsId) {
					App.log("onAppReady Diff - " + data.newsId + " # " + newsId)
					   
					$$('i.icon-bars').html('<span class="badge bg-red">$</span>');
					$$('.newsListItem span.badge').remove();
					$$('.newsListItem').append('<span class="badge bg-orange">NEW</span>');
				} else {
					App.log("onAppReady Event - news md5 same as before");
					
					$$('.newsListItem').find('span').remove();
					$$('i.icon-bars').find('span').remove();
				}

				setTimeout(function() {
					$$('#overlay-preloader').hide();

					if (data.news.important.isAvailable) {
						notifDOM.text("Important - " + data.news.important.news);
					} else if (data.news.warning.isAvailable) {
						notifDOM.text("Warning - " + data.news.warning.news);
					}

					if (isLogined) {
						window.checkEmailId = setTimeout(function() {
							function showEmailAlert() {
								myApp.prompt('Sorry, but we cannot get email from your device. Please write down your email', 'Important', function(email) {
									if (isEmail(email)) {
										nyanStorage.put('email', email);

										Util.showNotif('Email setting Successfuly', 4000);
									} else {
										showEmailAlert();
									}
								})
							}
							if (!nyanStorage.isAvailable('email')) {
								showEmailAlert();
							} else {
								if (!isEmail(nyanStorage.get('email'))) {
									showEmailAlert();
								}
							}
						}, 5000);	
					}

				}, 1000);
			} else {
				setTimeout(function() {
					App.log("onAppReady Event - Error: " + data.message);

					if (data.err == "SERVER_MTC") {
						$$('#overlay-preloader .sad').hide();
						$$('#overlay-preloader .maintenis').show();
					} else {
						$$('#overlay-preloader .sad').show();
						$$('#overlay-preloader .maintenis').hide();
					}

					$$('#overlay-preloader').find('img#nyandev-logo').hide();
					$$('#overlay-preloader').find("h4").text("Sorry, " + data.message);
					$$('#overlay-preloader').find("button").show();
				}, 1000);
			}


			if (userProfile) {
				Util.setProfile(userProfile);
			} else {
				isLogined = false;

				mainView.router.loadPage('login.html');
			}
		}, function(data, e, x) {
			App.log("onAppReady Event - Error: ");
			App.log(data);

			$$('#overlay-preloader').find('img#nyandev-logo').hide();
			$$('#overlay-preloader').find("h4").text("Sorry, we are can't connect to Server. Please try again later");
			$$('#overlay-preloader').find("button").show();

			if (e == 503) {
				$$('#overlay-preloader .sad').hide();
				$$('#overlay-preloader .maintenis').show();
				$$('#overlay-preloader').find("h4").text("Sorry, we are working on Maintenance. Please wait we are working faster.");
			
			} else {
				$$('#overlay-preloader .sad').show();
				$$('#overlay-preloader .maintenis').hide();
			}
		});

		if (nyanStorage.isAvailable('notifications') && (notifications.length != nyanStorage.get('notifications').length)) {
			notifications = nyanStorage.get('notifications');
		}

		notifDOM.text('TIPS: ' + notifications[Math.floor(Math.random() * notifications.length)])
	},
	onAppPause: function() {

		countDownStop = true;
	},
	onAppResume: function() {
		clearTimeout(nyanStorage.get('timeoutId'));
		Util.seeTime();
	},
	panel: {
		onOpen: function() {
			$$('.statusbar-overlay').addClass('with-panel-left');
		},
		onClose: function() {
			$$('.statusbar-overlay').removeClass('with-panel-left');
		}
	},
	page: {
		loginAccountDOM: "<li class=\"item-content\">\
			<div class=\"item-inner\">\
					<div class=\"card card-account\" data-address=\"{{ address }}\">\
						<div class='row'>\
							<div class=\"col-20\"><i class='icon icon-seat'></i></div>\
							<div class=\"col-80\">\
								<span class=\"address\">{{ shortAddress }}</span><br>\
								<span class=\"lastLogin\">Last login at {{ onLogin }}</span>\
							</div>\
					</div>\
				</div>\
			</div>\
		</li>",
		onInitLogin: function(page) {
			var accounts = nyanStorage.get('account');

			//LoginPage

			if (accounts.length != 0) {
				$$('#formContainer').addClass('hide');

				accounts.forEach(function(account) {
					account.shortAddress = account.address.substr(0, 8) + "__" + account.address.substr(-8, 8);

					elementTemplate = Template(Events.page.loginAccountDOM);
					elementRendered = elementTemplate(account); 	

					$$('#itemContainer').append(elementRendered);	
				});
			} else {
				$$('#listContainer').addClass('hide');
			}

			function doLogin(address, referral, manual) {
				var _ajax = new Ajax({	
					url: baseUrl + "auth/",
					method: 'POST',
					auth: false,
					data: {
						address: address,
						referral: referral,
						login: manual
					},
					key: deviceId
				});

				if (manual) {
					Util.trackEvent('Manual Login');
				} else {
					Util.trackEvent('Select Login');
				}

				_ajax.then(function (data) {
					// Save
					if (data.status) {
						nyanStorage.put('userProfile', data.results.user);
						nyanStorage.put('apiKey', data.results.apiKey);
						nyanStorage.put('data', data.data);
						nyanStorage.put('dollar', data.results.price);
						// nyanStorage.put('twofactorDetail', #twofactorDetail)

						Profiles = data.results.user;
						try {
							Util.setProfile(data.results.user);	
						} catch(e) {
							console.log(e)
						}

						myApp.hidePreloader();
						mainView.router.back();

						window.checkEmailId = setTimeout(function() {
							function showEmailAlert() {
								myApp.prompt('Sorry, but we cannot get email from your device. Please write down your email', 'Important', function(email) {
									if (isEmail(email)) {
										nyanStorage.put('email', email);

										Util.showNotif('Email setting Successfuly', 4000);
									} else {
										showEmailAlert();
									}
								})
							}
							if (!nyanStorage.isAvailable('email')) {
								showEmailAlert();
							} else {
								if (!isEmail(nyanStorage.get('email'))) {
									showEmailAlert();
								}
							}
						}, 5000);
					} else {
						
						myApp.alert(data.message);
					}
				}, Util.ajaxErrorCallback);
			}

			$$(page.container).find('#enterButton.inputForm').click(function () {
				Util.trackEvent('onLoginWithInput');

				var address = $$(page.container).find('input[name="address"]').val();
				var referral = $$(page.container).find('input[name="referral"]').val();

				if (address !== "") {
					doLogin(address, referral, true);
				} else {
					myApp.alert("Please fill Dogecoin address field");
				}

				return false;
			});
			$$(page.container).find('#enterButton.selectForm').click(function () {
				Util.trackEvent('onLoginWithSelected');

				var address = loginData.address;

				if (address !== "") {
					doLogin(address, "", false);
				} else {
					myApp.alert("Please fill Dogecoin address field");
				}
				return false;
			});

			nyanStorage.remove('userProfile');
			nyanStorage.remove('apiKey');
			nyanStorage.remove('data');
			nyanStorage.remove('adsFail');
			nyanStorage.remove('news');
			nyanStorage.remove('newsHash');
			nyanStorage.remove('adsPresent');

			nyanStorage.put('account', accounts);
		},
		onInitNews: function (page) {
			Util.trackEvent('onNewsInitialize');

			$$(page.container).find('#backButton').click(function () {
				myApp.pullToRefreshTrigger(faucetView);
				mainView.router.back();
			});
			function render(news) {
				var newsWrapper = document.getElementById('newsWrapper'),
					elementString = "";

				newsWrapper.innerHTML = "";
				news.forEach(function(post) {
					post.post = btoa(JSON.stringify(post));
					elementString = "<li class='swipeout'>\
										<div class='swipeout-content'><a href='javascript:void(0)' data-news='{{ post }}' class='item-link item-content link-news'>\
											<div class='item-inner'>\
												<div class='item-title-row'>\
													<div class='item-title'>{{ title }}</div>\
													<div class='item-after'>{{ viewer }} - {{ publish }}</div>\
												</div>\
												<div class='item-text'>{{ content }}</div>\
											</div>\
										</a></div>\
									</li>";

					elementTemplate = Template(elementString);
					elementRendered = elementTemplate(post); 	

					newsWrapper.innerHTML += elementRendered;			
					elementString = "";
				});
			}
			if (nyanStorage.isAvailable('news')) {
				render(nyanStorage.get('news'));
			} else {
				myApp.showIndicator();

				var _ajax = new Ajax({
					url: baseUrl + 'news/latest',
					method: "POST",
					auth: false
				});

				_ajax.then(function(data) {
					nyanStorage.put('news', data.results.news);
					nyanStorage.put('newsHash', data.results.newsHash);

					render(data.results.news);

					myApp.hideIndicator();
				}, Util.ajaxErrorCallback)
			}

			var ptrContent = $$(page.container).find('.pull-to-refresh-content');

			ptrContent.on('refresh', function(e) {
				var _ajax = new Ajax({
					url: baseUrl + 'news/latest',
					method: "POST",
					auth: false
				});

				_ajax.then(function(data) {
					nyanStorage.put('news', data.results.news);
					nyanStorage.put('newsHash', data.results.newsHash);

					render(data.results.news);
				}, Util.ajaxErrorCallback)

				myApp.pullToRefreshDone();
			});

			$$(page.container).find('.link-news').on('click', function(e) {
				var newsItem = JSON.parse(atob($$(this).data('news')));

				Events.open.news(newsItem)
			});
		},
		onInitDonate: function(page) {
			$$(page.container).find('#backButton').click(function () {
				mainView.router.back();
			});

			Util.trackEvent('onUserVisitDonate');

			$$(page.container).find('#bitcoinAddress').val(atob("MU1GV2diRXpwaWlnTmJqTW11TlBhYk15b0RtcnZUNmY4YQ=="));
			$$(page.container).find('#ethereumAddress').val(atob("MHhhNTA0ZTdhYmU1YTY5ZDYwNTlmODg0MDMzZmUzOGIzNTZhN2ExMjM5"));
			$$(page.container).find('#dogecoinAddress').val(atob("RFNad1dqQ2R2RUpZaHJuZDJzNzlVWVZYUm1raEZYclB2OQ=="));
			$$(page.container).find('#digibyteAddress').val(atob("REpMVVcyOVE0d0d3MXpMbXN3c2pHNGttamFLWFdzVlg1dg=="));
			$$(page.container).find('#litecoinAddress').val(atob("TFpqUGJWRG5hS2huN1BMMnpod3NuZGtWalRHRlNyZ3VNMw=="));
		},
		onInitTwoFactory: function(page) {
			myApp.showIndicator();
			
			if (!Profiles.twofactor) {
				setTimeout(function() {
					var _ajax = new Ajax({
						url: baseUrl + "auth/gauth/get",
						method: "POST",
						auth: true,
						data: {
							email: nyanStorage.get('email')
						}
					});

					_ajax.then(function(data) {
						if (data.success) {
							var qrCode = new QRCode(document.getElementById("qr-code"), "otpauth://totp/DogeFaucet?secret=" + data.secret);
							
							nyanStorage.put('signToken', {
								sign: data.sign,
								secret: data.secret
							});

							$$('#qr-code-text').text(data.secret);
							$$('#qr-code-text').click(function() {
								window.cordova.plugins.clipboard.copy(data.secret, function() {
						    		Util.showNotif("Secret Key has been copy to clipboard", 3000);
						    	}, function() {
						    		Util.showNotif("Error while copy to clipboard", 3000);
						    	});
							});
						}

						myApp.hideIndicator();
					}, Util.ajaxErrorCallback);
				}, 700);
			} else {
				$$('#available-token').show();
				$$('#main-token').hide();

				if (!nyanStorage.isAvailable('twofactorDetail')) {
					myApp.pullToRefreshTrigger(faucetView);
				} else {
					var twofactorDetail = nyanStorage.get('twofactorDetail');

					$$('#qr-code-description').html(Template("Yeah, your are already activate 2FA from <b>{{ model }}</b> and email <b>{{ email }}</b>")({
						model: twofactorDetail.model,
						email: twofactorDetail.email.secureMail()
					}));
				}

				faucetView.on('ptr:done', function() {
					var twofactorDetail = nyanStorage.get('twofactorDetail');

					$$('#qr-code-description').html(Template("Yeah, your are already activate 2FA from <b>{{ model }}</b> and email <b>{{ email }}</b>")({
						model: twofactorDetail.model,
						email: twofactorDetail.email.secureMail()
					}));
				});

				myApp.hideIndicator();
			}
		}
	},
	tab: {
		faucet: {
			onShow: function() {
				refreshButton.hide();
			},
			onRefresh: function() {
				var amountDollar;

				notifDOM.text('TIPS: ' + notifications[Math.floor(Math.random() * notifications.length)])

				if (Profiles == null) {
					nyanStorage.clear();
					mainView.router.loadPage('login.html');
				} else {
					amountDollar = Profiles.amount * nyanStorage.get('dollar');
					earningValueDollar.text("$ " + amountDollar.toFixed(7)); 
				}

				var _ajax = new Ajax({
					url: baseUrl + "auth/active",
					method: "POST",
					auth: true
				});

				_ajax.then(function(res, status, xhr) {
					Util.trackEvent('onRefreshUser');

					if (res.status) {
						nyanStorage.put('userProfile', res.results);
						nyanStorage.put('dollar', res.data.price);
						nyanStorage.put('twofactorDetail', res.results.twofactorDetail);

						// set global Profiles
						Profiles = res.results;

						var newsId = nyanStorage.get('newsHash');

						if (res.newsId !== newsId) {
							$$('i.icon-bars').html('<span class="badge bg-red">$</span>');
							$$('.newsListItem .badge').remove(); //remove first 
							$$('.newsListItem').append('<span class="badge bg-orange">NEW</span>');
						} else {
							$$('i.icon-bars').find('span').remove();
							$$('.newsListItem').find('span').remove();
						}

						Util.setProfile(res.results);
						clearTimeout(nyanStorage.get('timeoutId'));

						nyanStorage.put('withdrawalConfig', {
							min: res.data.min,
							max: res.data.max,
							fees: res.data.fees
						})

						wdLevel = res.data.fees;

						nyanStorage.put('referrals', res.referrals);

						wdMin.text(res.data.min);
						referralCounter.text(res.referrals);

						Util.seeTime();
						Util.showNotif("Synchronized", 3000);
					} else {
						Util.showNotif("Error Refresh Status", 3000);
					}
					myApp.pullToRefreshDone();
				}, Util.ajaxErrorCallback);
			}
		},
		history: {
			data: {
				claimDOM: "<tr>\
							<td class=\"label-cell content-nowrap\">#{{ id }}</td>\
							<td class=\"label-cell content-nowrap\"><span class='color-green'>{{ amount }} Ð</span></td>\
							<td class=\"label-cell content-nowrap\">{{ onClaim }}</td>\
						 </tr>",
				withdrawalDOM: "<div class=\"accordion-list\">\
								<div class=\"withdrawal-item accordion-item content-block\">\
									<a href=\"#\" class=\"item-link\">\
										<div class=\"row big-font\">\
											<div class=\"col-50\">\
												<span>#{{ id }}</span>\
											</div>\
											<div class=\"col-50\" align=\"right\">\
												<span class='color-red'>-{{ amount }} Ð</span>\
											</div>\
										</div>\
										<span class=\"badge {{colorLabel}}\">{{ status }}</span>\
										<span class=\"badge bg-orange\">{{ level }}</span>\
										<div class=\"date-time\">\
											<i class=\"icon icon-time\"></i> {{ onSuccess }}\
										</div>\
									</a>\
									<div class=\"accordion-item-content\">\
										<div>\
											<span class=\"subtitle\">Address</span><br>\
											<span>{{ address }}</span>\
										</div>\
										<div>\
											<span class=\"subtitle\">Requested</span><br>\
											<span>{{ requestDate }}</span>\
										</div>\
										<div>\
											<span class=\"subtitle\">Fee</span><br>\
											<span>{{ fee }}</span>\
										</div>\
										<div class='{{ isSuccess }}'>\
											<span class=\"subtitle\">TX</span><br>\
											<span class=\"txhash\">{{ txId }}</span>\
										</div>\
										<div class='{{ isCancel }}'>\
											<span class=\"subtitle\">Reason</span><br>\
											<span class=\"txhash\">{{ reason }}</span>\
										</div>\
										<div class='{{ isTwoFactory }}'>\
											<span class=\"subtitle\">Cancel</span><br>\
											<button data-id=\"{{ id }}\" class=\"withdrawal-cancel button button-raised button-fill color-red\">Cancel</button>\
										</div>\
									</div>\
								</div></div>"
			},
			onShow: function() {

				// Show Refresh Icon
				refreshButton.show();

				if (!historyRender) {
					myApp.pullToRefreshTrigger(historyView);
					historyRender = true;
				} 

				refreshButton.click(function(e) {
					myApp.pullToRefreshTrigger(historyView);
				});
			},
			onRefresh: function() {
				var withdrawalTable = document.getElementById('withdrawalTable');
				var avgReward = $$('#avgReward');

				// Reset
				// dataTable.innerHTML = "";
				withdrawalTable.innerHTML = "";

				var _ajax = new Ajax({
					url: baseUrl + 'history/',
					method: "POST",
					auth: true
				});

				_ajax.then(function(res, status, xhr) {
					Util.trackEvent('onRefreshHistory');

					if (res.success) {
						nyanStorage.put('historySource', res.results);
						nyanStorage.put('referrals', res.results.referrals);

						referralCounter.text(res.results.referrals);
						avgReward.text(res.results.rewards);
						
						res.results.withdrawal.forEach(function(data) {
							var isSuccess = (data.status == "Success");
							var isCancel = (data.status == "Canceled");

							data.colorLabel = (isSuccess) ? "bg-green" : (data.status == "Canceled") ? "bg-red" : "bg-orange";
							data.txIdDisplay = (isSuccess) ? "<a>" + data.txId.substr(0, 30) + "...</a>" : "Not Avialable";
							data.showReason = (data.status == "Canceled") ? 'showReason' : 'hideReason';
							data.isSuccess = (isSuccess) ? "success" : "none";
							data.isCancel = (isCancel) ? "show" : "hide";
							data.isTwoFactory = (Profiles.twofactor && data.status != "Canceled") ? "show" : "hide";
							data.requestDate = new Date(data.onSubmit).toLocaleString();
							data.fee = wdLevel[data.level.toLowerCase()] + " Ð";

							elementString = Events.tab.history.data.withdrawalDOM;
							elementTemplate = Template(elementString);
							elementRendered = elementTemplate(data);

							withdrawalTable.innerHTML += elementRendered;
						});

						if (res.results.withdrawal.length == 0) {
							withdrawalTable.innerHTML = "<div class='content-block-title' style='padding: 0;'>No data</div>";
						}

						$$('#total_proccess').text(res.results.statistic.tProccess);
						$$('#total_dogecoin').text(res.results.statistic.tDogecoin);
						$$('#server_date').text(res.snonce);
					}

					myApp.pullToRefreshDone();
				}, Util.ajaxErrorCallback);
			}
		},
		withdrawal: {
			onShow: function() {
				refreshButton.hide();

				var timeoutId = true;
				$$('#amountWd').on('keyup', (function() {
					if (timeoutId) {
						window.clearTimeout(timeoutId);

						timeoutId = window.setTimeout(function() {
							var thisVal = $$('#amountWd').val();
							var wdLevelSelected = selectWithdrawalLevel.text();
							var feeWdVal = wdLevel[wdLevelSelected.toLowerCase()];

							console.log(feeWdVal);

							$$('#estimatedReceived').val((thisVal * 1) - feeWdVal);
						}, 500);
					}
				}));

				if (Profiles.twofactor) {
					$$('#gauth-token-wrap').removeClass('disabled');
				}
			}
		},
		exchange: {
			onShow: function() {
				refreshButton.hide();
			}
		}
	},
	button: {
		onClickBoxToggle: function() {
			boxToggle.toggleClass('active');
			menuBottom.toggleClass('active');
		},
		onClickClaim: function(event) {
			Util.trackEvent('onClaim');
			
			if ($$('#addressInput').val() !== "" && nyanStorage.get('claimTime') == null) {
				if (Profiles.status == "active") {

					var _ajax = new Ajax({
						url: baseUrl + "claim/",
						method: "POST",
						auth: true,
						headers: {
							Token: nyanStorage.get('apiKey')
						},
						data: {
							positionX: event.clientX.toString(),
							positionY: event.clientY.toString()
						}
					});

					_ajax.then(function (data, status, xhr) {
						if (data.success) {
							nyanStorage.put('startClaim', Date.now());
							nyanStorage.put('claim', false);

							Util.countdown(4, 60);
							buttonClaim.addClass('disabled');

							earningValue.text((data.results.total * 1).toFixed(4) + " Ð");
							earningRefValue.text(data.results.refEarn + " Ð");
							Util.showNotif("+" + data.results.earn + " Ð", 3000);

							// Sync amount to Storage
							var profiles = nyanStorage.get('userProfile');
								profiles.amount = data.results.total;

							// Show Adds Pop up
							if (!debug) {
								AdMob.showInterstitial();
							}

							// Setter global variable and global storage
							Profiles = profiles;
							nyanStorage.put('userProfile', profiles);

							Util.renderPrice();
							Util.trackEvent('onValidClaim');
						} else {
							try {
								window.ga.trackException('onClaimError', false);
							} catch(e) {
								App.log('onClaimError trackException error');
							}
							try	{
								if (data.message) {
									Util.showNotif("ERROR: " + data.message, 3000);

									if (data.message.indexOf('already claim')) {
									
									}
									if (data.code == "ERRBANN") {
										Util.bannedCallback();
									}
								}
							} catch(e) {
								console.log(data.message);
							}
						}
					}, Util.ajaxErrorCallback);
				} else {
					Util.bannedCallback();
				}
			}

			App.log("onClickClaim event finish");
		},
		onClickWithdrawal: function() {
			Util.trackEvent('onRequestWithdrawal');

			if (Profiles.status == "active") {

				var _token = "";
				var amountToWd = ($$('#amountWd').val() * 1);
				var profile = nyanStorage.get('userProfile');
				var withdrawalConfig = nyanStorage.get('withdrawalConfig');
				var wdLevelSelected = selectWithdrawalLevel.text();
				var withdrawalFees = wdLevel[wdLevelSelected.toLowerCase()];

				// do confirm
				if (amountToWd != 0) {
					var fromTimeout = false;
					var notifAdded = myApp.addNotification({
						message: "Confirm this action, auto cancel in 5s",
						button: {
							text: 'YES'
						},
						onClose: function() {
							if (!fromTimeout) {
								if (Profiles.twofactor) {
									_token = $$('#gauth-token').val();

									if (_token.length > 6 || _token.length < 6) {
										Util.showNotif("Google Authenticator OTP not correct", 4000);

										return false;
									}
								}

								if (amountToWd > (profile.amount + withdrawalFees)) {
									Util.showNotif("Amount withdrawal is larger than your earning amount!", 5000);
								} else if (amountToWd < withdrawalConfig.min) {
									Util.showNotif("Amount withdrawal is smaller than Minimum Withdrawal!", 5000);
								} else if (amountToWd > withdrawalConfig.max) {
									Util.showNotif("Amount withdrawal is larger than Maximum Withdrawal!", 5000);
								} else {
									var _ajax = new Ajax({
										url: baseUrl + 'withdrawal/request/',
										method: "POST",
										auth: true,
										data: {
											amount: amountToWd.toString(),
											level: wdLevelSelected,
											otp: _token
										}
									});

									_ajax.then(function(res, status, xhr) {
										if (res.status) {
											Util.showNotif("Withdrawal request has been added", 3000);

											setTimeout(function() {
												myApp.pullToRefreshTrigger(faucetView);
											}, 3000);
										} else {
											try	{
												if (res.message) {
													myApp.alert("ERROR: " + res.message);
												}

												if (res.code == "ERRBANN") {
													Util.bannedCallback();
												}
											} catch(e) {
												console.log(res.message);
											}
										}
									}, Util.ajaxErrorCallback);
								}
							}
						}
					});

					setTimeout(function() {
						fromTimeout = true;
						myApp.closeNotification(notifAdded);
					}, 5000);
				} else {
					Util.showNotif("Please fill amount of Doge you want to Withdrawal", 5000);
				}
			} else {

				Util.bannedCallback();
			}
		},
		onClickSelectWithdrawalLevel: function(e) {
			var _self = this;
			var fees = nyanStorage.get('fees');
			var options = [];

			if (fees) {
				Object.keys(fees).forEach(function(fee) {
					options.push({
						text: toFirstBig(fee) + " (-"+ fees[fee] + " Doge)",
						onClick: function() {
							$$(_self).text(toFirstBig(fee));
							Events.button.onSelectWithdrawalLevelChange(fee);
						}
					})
				});
			} else {
				Util.showNotif('ERROR: Please close and run apps again', 4000);

				return false;
			}

			myApp.actions(options);
		},
		onSelectWithdrawalLevelChange: function(wdLevelSelected) {
			var feeWdVal = wdLevel[wdLevelSelected];
			var timeoutId = true;
			
			if (timeoutId) {
				window.clearTimeout(timeoutId);

				timeoutId = window.setTimeout(function() {
					var thisVal = $$('#amountWd').val();
					$$('#estimatedReceived').val((thisVal * 1) - feeWdVal);
				}, 500);
			}
		},
		onVerifyClick: function() {
			var tokenInput = $$('#enableTokenVerify').val();

			var _token = nyanStorage.get('signToken');
			var _ajax = new Ajax({
				url: baseUrl + "auth/gauth/verify",
				method: "POST",
				auth: true,
				data: {
					Email: nyanStorage.get('email'),
					Sign: _token.sign,
					Secret: _token.secret,
					Token: tokenInput
				}
			});

			_ajax.then(function(data) {
				if (data.success) {
					nyanStorage.remove('signToken');

					Profiles.twofactor = true;

					nyanStorage.put('userProfile', Profiles);
					nyanStorage.put('twofactorDetail', {
						email: data.results.email,
						model: data.results.model	
					});

					mainView.router.back();
					Util.showNotif('2FA Successfuly activated', 3000);
				}
				}, Util.ajaxErrorCallback);
		},
		onRemoveClick: function() {
			var tokenInput = $$('#removeTokenVerify').val();

			var _token = nyanStorage.get('signToken');
			var _ajax = new Ajax({
				url: baseUrl + "auth/gauth/remove",
				method: "POST",
				auth: true,
				data: {
					email: nyanStorage.get('email'),
					otp: tokenInput
				}
			});

			_ajax.then(function(data) {
				if (data.success) {
					Profiles.twofactor = false;

					nyanStorage.put('userProfile', Profiles);
					nyanStorage.put('twofactorDetail', {
						email: data.results.email,
						model: data.results.model	
					});

					mainView.router.back()
					Util.showNotif('2FA Successfuly deactivated', 3000);
				}
			}, Util.ajaxErrorCallback);
		},
		onCancelWithdrawal: function() {
			var id = $$(this).attr('data-id');

			myApp.prompt('6 Digit Code Google Authenticator', 'Two Factor Authentication', function (otp) {
				if (otp.length > 6) {
					Util.showNotif("Google Authenticator OTP not correct", 4000);

					return false;
				} else {
					var _ajax = new Ajax({
						url: baseUrl + 'withdrawal/cancel/',
						method: 'POST',
						auth: true,
						data: {
							id: id,
							otp: otp
						}
					});

					_ajax.then(function(data) {
						if (data.success) {
							Util.showNotif("Withdrawal #" + id + " successfuly canceled", 4000);

							myApp.pullToRefreshTrigger(historyView);
						} else {
							Util.showNotif("Error while canceling withdrawal, please contact developer by email", 4000);
						}
					}, Util.ajaxErrorCallback)
				}
			});
		}
	},
	other: {
		makeRandomNotif: function() {
			notifDOM.text('TIPS: ' + notifications[Math.floor(Math.random() * notifications.length)]);
		}
	}
}
var Template = function(text) {
	var noMatch = /(.)^/;
	var settings = {
		interpolate : /\{\{(.+?)\}\}/g
	};
	var escaper = /\\|'|\r|\n|\u2028|\u2029/g;
	var escapes = {
		"'":      "'",
		'\\':     '\\',
		'\r':     'r',
		'\n':     'n',
		'\u2028': 'u2028',
		'\u2029': 'u2029'
	};
	var escapeChar = function(match) {
		return '\\' + escapes[match];
	};

	// Combine delimiters into one regular expression via alternation.
	var matcher = RegExp([
		(settings.escape || noMatch).source,
		(settings.interpolate || noMatch).source,
		(settings.evaluate || noMatch).source
	].join('|') + '|$', 'g');

	// Compile the template source, escaping string literals appropriately.
	var index = 0;
	var source = "__p+='";
	text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
		source += text.slice(index, offset).replace(escaper, escapeChar);
		index = offset + match.length;

		if (escape) {
			source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
		} else if (interpolate) {
			source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
		} else if (evaluate) {
			source += "';\n" + evaluate + "\n__p+='";
		}

		// Adobe VMs need the match returned to produce the correct offest.
		return match;
	});
	source += "';\n";

	// If a variable is not specified, place data values in local scope.
	if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

	source = "var __t,__p='',__j=Array.prototype.join," +
		"print=function(){__p+=__j.call(arguments,'');};\n" +
		source + 'return __p;\n';

	try {
		var render = new Function(settings.variable || 'obj', '_', source);
	} catch (e) {
		e.source = source;
		throw e;
	}

	var template = function(data) {
		return render.call(this, data);
	};

	// Provide the compiled source as a convenience for precompilation.
	var argument = settings.variable || 'obj';
		template.source = 'function(' + argument + '){\n' + source + '}';

	return template;
};
var Util = {
	countdown: function(minutes, seconds) {
		var mins = minutes;

		function tick() {
			var counter = $$('#doClaim');
			var current_minutes = mins-1
			seconds--;
			
			counter.text(current_minutes.toString() + ":" + (seconds < 10 ? "0" : "") + String(seconds));
			if (seconds > 0) {
				var timeoutId = setTimeout(tick, 1000);
				nyanStorage.put('timeoutId', timeoutId);
			} else {
				if(mins > 1){
					Util.countdown(mins-1, 60);           
				}
			}
			if (seconds == 0 && mins == 1) {
				countDownStop = true;
				Util.readyToClaim();
			} 
		}
		tick();
	},
	setProfile: function(profile) {
		$$('#addressInput').val(profile.address);

		earningValue.text((profile.amount * 1).toFixed(4) + " Ð");
		referralCode.text(profile.referral);
		earningRefValue.text(profile.amountRef + " Ð");
		referralCounter.text(nyanStorage.get('referrals'));
		addressDogecoin.text(profile.address.substr(0, 8) + "__" + profile.address.substr(-8, 8));

		var withdrawalConfig = nyanStorage.get('withdrawalConfig');

		var progress = ((profile.amount * 1) / withdrawalConfig.min) * 100;
		var progressbar = $$('.progressbar-inline .progressbar');

		myApp.setProgressbar(progressbar, progress);

		$$('#percentValue').text(progress.toFixed(2) + "%");
		if (progress > 100) {
			$$('#percentValue').addClass('luweh');
		}

		Util.renderPrice();
	},
	getTimeDiff: function(date) {
		var today = new Date();
		var newDate = new Date(date);

		return Math.floor((today.getTime() - newDate.getTime()) / 1000);
	},
	showNotif: function(message, timeout) {
		var notifAdded = myApp.addNotification({
			message: message
		});

		setTimeout(function() {
			myApp.closeNotification(notifAdded);
		}, timeout);

		return false;
	},
	readyToClaim: function() {
		buttonClaim.removeClass("disabled");
		buttonClaim.text("Claim");

		nyanStorage.put('claim', true);
		nyanStorage.remove('startClaim');

		Util.showNotif('Now, Faucet ready to claim!', 5000);

	 //    cordova.plugins.notification.local.schedule({
		//     title: 'DogeFaucet',
		//     text: 'Hi, Faucet ready to claim!',
		//     foreground: true
		// });
	},
	ajaxErrorCallback: function(data) {
		var statusCode = data.status;	

		if (statusCode !== 200 || data.statusText !== "OK") {	
			switch(statusCode) {
				case 401:
					mainView.router.loadPage('login.html');

					Util.showNotif("Sorry, please login again!", 6000);
					break;
				case 403:
					mainView.router.loadPage('login.html');

					clearTimeout(window.checkEmailId);

					Util.showNotif("Sorry, session timeout. please login again!", 6000);
					break;
				case 400:

					Util.showNotif("Sorry, rejected request!", 5000);
					break;
				case 406:

					Util.showNotif("Sorry, Google Authenticator code missmatch!", 5000);
					break;	
				case 500:

					Util.showNotif("Sorry, server on maintenance!", 5000);
					break;
				case 503:

					Util.showNotif("Hold on, server on maintenance! Please wait until we finished our working.", 5000);
					break;
				default:
					if (data.statusText) {
						Util.showNotif(statusCode + ": " + data.statusText, 5000);
					} else {
						try {
							window.ga.trackException('onAjaxError', true);
						} catch(e) {
							App.log('trackException is not founds');
						}

						Util.showNotif("Sorry, we are can't connect to Server. Pelase try again later", 3000);
					}
					break;
			}
		}

		myApp.hidePreloader();
		myApp.hideIndicator();
		myApp.pullToRefreshDone();
	},
	seeTime: function() {
		if (!nyanStorage.isAvailable('startClaim')) {
			buttonClaim.removeClass('disabled');
			buttonClaim.text('Claim');
		} else {
			buttonClaim.addClass('disabled');

			var startClaim = nyanStorage.get('startClaim');
			var diffClaim = (4 * 60) - Util.getTimeDiff(startClaim);

			if (diffClaim < 0) {
				buttonClaim.removeClass('disabled');
				buttonClaim.text('Claim');
			} else {
				var minutes = Math.floor(diffClaim / 60);
				var seconds = diffClaim - minutes * 60;

				Util.countdown((minutes + 1), seconds);
			}
		}
	},
	renderPrice: function(price) {
		var amountDollar;

		if (typeof price === "undefined") {
			amountDollar = Profiles.amount * nyanStorage.get('dollar');

			earningValueDollar.text("$ " + amountDollar.toFixed(7)); 
		} else {
			amountDollar = Profiles.amount * price;
			
			earningValueDollar.text("$ " + amountDollar.toFixed(7)); 
		}
	},
	trackEvent: function(eventName) {
		try {
			window.ga.trackEvent('Apps', eventName, 'Hits', 1);
		} catch(e) {
			App.log('event tract error ' + eventName);
		}
	},
	bannedCallback: function() {
		myApp.confirm("Sorry, your account has banned automatically by Systems. Please fill this form to Appeal. Select 'OK' to copy form url.", function() {
			window.cordova.plugins.clipboard.copy(appealUrl, function() {
				myApp.alert("Url already copy to clipboard");
			}, function() {
				myApp.alert("Ow no, we can't copy the url into clipboard. Write this manualy, '" + appealUrl + "'");
			});
		});
	}
}

function isObject(variable) {

	return (typeof variable == "object")
}
function isArray(variable) {

	return (typeof variable == "object")
}
function limitMe(element) {
	if (element.value.length >= 6 ) {
		var token = $$(element).val();

		$$(element).val(token.substr(0, 6));
	}
}
function isEmail(mail) {
	if (/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(mail)) {
		return (true)
	}

	return (false)
}
function toFirstBig(string) {
	return string.charAt(0).toUpperCase() + string.slice(1);
}
/**	
 * Ajax Events 
 */
$$(document).on('ajaxStart', Events.onAjaxDetected);
$$(document).on('ajaxComplete', Events.onAjaxDetected);

/**	
 * Panel Events
 */
$$('.panel-left').on('close', Events.panel.onClose);
$$('.panel-left').on('open', Events.panel.onOpen);

/**	
 * Button Events
 */
buttonClaim.on('click', Events.button.onClickClaim);
doWithdrawalButton.on('click', Events.button.onClickWithdrawal);
boxToggle.on('click', Events.button.onClickBoxToggle);
selectWithdrawalLevel.on('click', Events.button.onClickSelectWithdrawalLevel)

/**	
 * Page Events
 */
myApp.onPageInit('login', Events.page.onInitLogin);
myApp.onPageInit('news', Events.page.onInitNews);
myApp.onPageInit('donateView', Events.page.onInitDonate);
myApp.onPageInit('2fa', Events.page.onInitTwoFactory);

/**	
 * Tabs Events
 */
faucetView.on('tab:show', Events.tab.faucet.onShow);
faucetView.on('ptr:refresh', Events.tab.faucet.onRefresh);
historyView.on('tab:show', Events.tab.history.onShow);
historyView.on('ptr:refresh', Events.tab.history.onRefresh);
withdrawalView.on('tab:show', Events.tab.withdrawal.onShow);
exchangeView.on('tab:show', Events.tab.exchange.onShow);

/**
 * Event Want Push to Analytics
 */
document.addEventListener('onAdFailLoad', function(e) {
	/**	Push analytics onAdFailLoad */
	window.ga.trackEvent('Apps', 'onAdFailLoad', 'Fail', 1); 

	nyanStorage.increment('adsFail', 1);
});
document.addEventListener('onAdPresent', function(e) {
	/** Push analytics onAdPresent */
	window.ga.trackEvent('Apps', 'onAdPresent', 'Hits', 1); 

	nyanStorage.increment('adsPresent', 1);
});

$$(document).on('click', '#switchButton', function(e) {
	myApp.confirm("Becareful every device limited to have 2 account, more than 2 we will able to BANNED your device.", "Warning", function() {
		$$('#listContainer').addClass('hide');
		$$('#formContainer').removeClass('hide');
	});
});
$$(document).on('click', '.card-account', function(e) {
	$$('.card-account').forEach(function(item) {
		$$(item).removeClass('selected');
		$$(item).parent().parent().removeClass('selected')
	});

	$$(this).toggleClass('selected');
	$$(this).parent().parent().toggleClass('selected');

	var address = $$(this).attr('data-address');
		loginData.address = address;

	App.log(loginData);
});
notifDOM.parent().parent().click(Events.other.makeRandomNotif);


$$(document).on('click', '#qr-code-verify', Events.button.onVerifyClick);
$$(document).on('click', '#qr-code-remove', Events.button.onRemoveClick);
$$(document).on('click', '.withdrawal-cancel', Events.button.onCancelWithdrawal);


String.prototype.secureMail = function() { 
	var email = this.split('@'),
		mail = email[0].substr(0, 5) + "__" + email[0].substr(-2, 2);

	return mail + '@' + email[1];
}

//fire event on app loaded
Events.init();
